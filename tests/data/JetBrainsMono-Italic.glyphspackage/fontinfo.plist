{
.appVersion = "3306";
.formatVersion = 3;
axes = (
{
name = Weight;
tag = wght;
}
);
classes = (
{
automatic = 1;
code = "A Aacute Abreve Abreveacute Abrevedotbelow Abrevegrave Abrevehookabove Abrevetilde Acaron Acircumflex Acircumflexacute Acircumflexdotbelow Acircumflexgrave Acircumflexhookabove Acircumflextilde Adieresis Adotbelow Agrave Ahookabove Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Ccircumflex Cdotaccent D Eth Dcaron Dcroat E Eacute Ebreve Ecaron Ecircumflex Ecircumflexacute Ecircumflexdotbelow Ecircumflexgrave Ecircumflexhookabove Ecircumflextilde Edieresis Edotaccent Edotbelow Egrave Ehookabove Emacron Eogonek Etilde F G Gacute Gbreve Gcaron Gcircumflex Gcommaaccent Gdotaccent H Hbar Hcircumflex I Iacute Ibreve Icircumflex Idieresis Idotaccent Idotbelow Igrave Ihookabove Imacron Iogonek Itilde J Jcircumflex K Kcommaaccent L Lacute Lcaron Lcommaaccent Ldot Lslash M N Nacute Ncaron Ncommaaccent Eng Ntilde O Oacute Obreve Ocircumflex Ocircumflexacute Ocircumflexdotbelow Ocircumflexgrave Ocircumflexhookabove Ocircumflextilde Odieresis Odotbelow Ograve Ohookabove Ohorn Ohornacute Ohorndotbelow Ohorngrave Ohornhookabove Ohorntilde Ohungarumlaut Omacron Oogonek Oslash Oslashacute Otilde OE P Thorn Q R Racute Rcaron Rcommaaccent S Sacute Scaron Scedilla Scircumflex Scommaaccent Germandbls Schwa T Tbar Tcaron Tcedilla Tcommaaccent U Uacute Ubreve Ucircumflex Udieresis Udotbelow Ugrave Uhookabove Uhorn Uhornacute Uhorndotbelow Uhorngrave Uhornhookabove Uhorntilde Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ydotbelow Ygrave Yhookabove Ymacron Ytilde Z Zacute Zcaron Zdotaccent A-cy Be-cy Ve-cy Ge-cy Gje-cy Gheupturn-cy De-cy Ie-cy Io-cy Zhe-cy Ze-cy Ii-cy Iishort-cy Ka-cy Kje-cy El-cy Em-cy En-cy O-cy Pe-cy Er-cy Es-cy Te-cy U-cy Ushort-cy Ef-cy Ha-cy Che-cy Tse-cy Sha-cy Shcha-cy Dzhe-cy Softsign-cy Hardsign-cy Yeru-cy Lje-cy Nje-cy Dze-cy E-cy Ereversed-cy I-cy Yi-cy Je-cy Tshe-cy Iu-cy Ia-cy Dje-cy Ghestroke-cy Kadescender-cy Endescender-cy Ustraight-cy Ustraightstroke-cy Chedescender-cy Shha-cy Schwa-cy Obarred-cy Alpha Beta Gamma Delta Epsilon Zeta Eta Theta Iota Kappa Lambda Mu Nu Xi Omicron Pi Rho Sigma Tau Upsilon Phi Chi Psi Omega Alphatonos Epsilontonos Etatonos Iotatonos Omicrontonos Upsilontonos Omegatonos Iotadieresis Upsilondieresis KaiSymbol FdoubleStruck NdoubleStruck QdoubleStruck SdoubleStruck ZdoubleStruck";
name = Uppercase;
},
{
code = "zero
zero.zero
one
two
#twoTurned
#threeTurned
three
four
five
six
seven
eight
nine";
name = Digit;
},
{
code = "a b c d e f A B C D E F";
name = DigitHex;
}
);
customParameters = (
{
name = fsType;
value = (
);
},
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "Family Alignment Zones";
value = (
{
pos = 830;
size = 10;
},
{
pos = 730;
size = 10;
},
{
pos = 550;
size = 10;
},
{
pos = 0;
size = -10;
},
{
pos = -110;
size = -10;
},
{
pos = -180;
size = -10;
}
);
},
{
name = isFixedPitch;
value = 1;
},
{
name = "Use Typo Metrics";
value = 1;
},
{
name = "Enforce Compatibility Check";
value = 1;
},
{
name = "Write lastChange";
value = 0;
},
{
name = "Use Line Breaks";
value = 1;
}
);
date = "2021-06-24 10:39:02 +0000";
familyName = "JetBrains Mono";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn KAZ;
languagesystem latn TAT;
languagesystem latn TRK;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn CAT;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature calt;
feature locl;
feature subs;
feature sinf;
feature sups;
feature frac;
feature ordn;
feature case;
feature zero;
";
tag = aalt;
},
{
code = "lookup uppercaseSharpS {
    sub @Uppercase @Uppercase germandbls' by germandbls.calt;
    sub germandbls' @Uppercase by germandbls.calt;
} uppercaseSharpS;

lookup equal_colon.liga {
ignore sub equal equal' colon;
ignore sub equal' colon colon;
ignore sub equal' colon equal;
sub SPC colon' by equal_colon.liga;
sub equal' colon by SPC;
} equal_colon.liga;

lookup at_underscore.liga {
ignore sub at at' underscore;
ignore sub at' underscore underscore;
sub SPC underscore' by at_underscore.liga;
sub at' underscore by SPC;
} at_underscore.liga;

lookup numbersign_numbersign.liga {
ignore sub numbersign numbersign' numbersign;
ignore sub numbersign' numbersign numbersign;
sub SPC numbersign' by numbersign_numbersign.liga;
sub numbersign' numbersign by SPC;
} numbersign_numbersign.liga;

lookup numbersign_numbersign_numbersign.liga {
ignore sub numbersign numbersign' numbersign numbersign;
ignore sub numbersign' numbersign numbersign numbersign;
sub SPC SPC numbersign' by numbersign_numbersign_numbersign.liga;
sub SPC numbersign' numbersign by SPC;
sub numbersign' numbersign numbersign by SPC;
} numbersign_numbersign_numbersign.liga;

lookup numbersign_numbersign_numbersign_numbersign.liga {
ignore sub numbersign numbersign' numbersign numbersign numbersign;
ignore sub numbersign' numbersign numbersign numbersign numbersign;
sub SPC SPC SPC numbersign' by numbersign_numbersign_numbersign_numbersign.liga;
sub SPC SPC numbersign' numbersign by SPC;
sub SPC numbersign' numbersign numbersign by SPC;
sub numbersign' numbersign numbersign numbersign by SPC;
} numbersign_numbersign_numbersign_numbersign.liga;

lookup bar_braceright.liga {
ignore sub bar bar' braceright;
ignore sub bar' bar braceright;
sub SPC braceright' by bar_braceright.liga;
sub bar' braceright by SPC;
} bar_braceright.liga;

lookup bracketleft_bar.liga {
ignore sub bracketleft bracketleft' bar;
sub SPC bar' by bracketleft_bar.liga;
sub bracketleft' bar by SPC;
} bracketleft_bar.liga;

lookup bar_bracketright.liga {
ignore sub bar' bracketright bracketright;
sub SPC bracketright' by bar_bracketright.liga;
sub bar' bracketright by SPC;
} bar_bracketright.liga;

lookup bracketleft_less.liga {
ignore sub bracketleft bracketleft' less;
ignore sub bracketleft' less less;
ignore sub bracketleft' less plus;
ignore sub bracketleft' less asterisk;
ignore sub bracketleft' less dollar;
ignore sub bracketleft' less slash;
ignore sub bracketleft' less equal;
sub SPC less' by bracketleft_less.liga;
sub bracketleft' less by SPC;
} bracketleft_less.liga;

lookup braceleft_bar.liga {
ignore sub braceleft braceleft' bar;
ignore sub braceleft' bar bar;
sub SPC bar' by braceleft_bar.liga;
sub braceleft' bar by SPC;
} braceleft_bar.liga;

#lookup backslash_backslash.liga {
#sub SPC backslash' by 
#} backslash_backslash.liga;

lookup slash_slash.liga {
ignore sub slash slash' slash;
ignore sub slash' slash slash;
ignore sub slash' slash equal;
sub SPC slash' by slash_slash.liga;
sub slash' slash by SPC;
} slash_slash.liga;

lookup slash_slash_slash.liga {
ignore sub slash slash' slash slash;
ignore sub slash' slash slash slash;
sub SPC SPC slash' by slash_slash_slash.liga;
sub SPC slash' slash by SPC;
sub slash' slash slash by SPC;
} slash_slash_slash.liga;

lookup slash_equal.liga {
ignore sub slash slash' equal;
ignore sub equal slash' equal;
ignore sub slash' equal equal;
sub SPC equal' by slash_equal.liga;
sub slash' equal by SPC;
} slash_equal.liga;

lookup slash_slash_equal.liga {
ignore sub slash slash' slash equal;
ignore sub equal slash' slash equal;
ignore sub slash' slash equal equal;
sub SPC SPC equal' by slash_slash_equal.liga;
sub SPC slash' equal by SPC;
sub slash' slash equal by SPC;
} slash_slash_equal.liga;

lookup slash_equal_equal.liga {
ignore sub slash slash' equal equal;
ignore sub slash' equal equal equal;
sub SPC SPC equal' by slash_equal_equal.liga;
sub SPC equal' equal by SPC;
sub slash' equal equal by SPC;
} slash_equal_equal.liga;

lookup slash_asterisk.liga {
ignore sub slash slash' asterisk;
ignore sub asterisk slash' asterisk;
ignore sub slash' asterisk asterisk;
ignore sub slash' asterisk slash;
ignore sub slash' asterisk period;
sub SPC asterisk' by slash_asterisk.liga;
sub slash' asterisk by SPC;
} slash_asterisk.liga;

lookup slash_asterisk_asterisk.liga {
ignore sub slash slash' asterisk asterisk;
ignore sub asterisk slash' asterisk asterisk;
ignore sub slash' asterisk asterisk asterisk;
ignore sub slash' asterisk asterisk slash;
ignore sub slash' asterisk asterisk period;
sub SPC SPC asterisk' by slash_asterisk_asterisk.liga;
sub SPC asterisk' asterisk by SPC;
sub slash' asterisk asterisk by SPC;
} slash_asterisk_asterisk.liga;

lookup asterisk_slash.liga {
 ignore sub asterisk asterisk' slash;
 ignore sub slash asterisk' slash;
 ignore sub period asterisk' slash;
 ignore sub asterisk' slash slash;
 ignore sub asterisk' slash asterisk;
 sub SPC slash' by asterisk_slash.liga;
 sub asterisk' slash by SPC;
} asterisk_slash.liga;

lookup asterisk_asterisk_asterisk.liga {
ignore sub asterisk asterisk' asterisk asterisk;
ignore sub asterisk' asterisk asterisk asterisk;
sub SPC SPC asterisk' by asterisk_asterisk_asterisk.liga;
sub SPC asterisk' asterisk by SPC;
sub asterisk' asterisk asterisk by SPC;
} asterisk_asterisk_asterisk.liga;

lookup plus_plus.liga {
ignore sub plus plus' plus;
ignore sub plus' plus plus;
sub SPC plus' by plus_plus.liga;
sub plus' plus by SPC;
} plus_plus.liga;

lookup plus_plus_plus.liga {
ignore sub plus plus' plus plus;
ignore sub plus' plus plus plus;
sub SPC SPC plus' by plus_plus_plus.liga;
sub SPC plus' plus by SPC;
sub plus' plus plus by SPC;
} plus_plus_plus.liga;

lookup period_question.liga {
ignore sub period period' question;
ignore sub period' question question;
sub SPC question' by period_question.liga;
sub period' question by SPC;
} period_question.liga;

lookup period_period.liga {
ignore sub period period' period;
ignore sub period' period period;
ignore sub period' period less;
sub SPC period' by period_period.liga;
sub period' period by SPC;
} period_period.liga;

lookup period_period_period.liga {
ignore sub period period' period period;
ignore sub period' period period period;
sub SPC SPC period' by period_period_period.liga;
sub SPC period' period by SPC;
sub period' period period by SPC;
} period_period_period.liga;

lookup period_period_less.liga {
ignore sub period period' period less;
ignore sub period' period less less;
sub SPC SPC less' by period_period_less.liga;
sub SPC period' less by SPC;
sub period' period less by SPC;
} period_period_less.liga;

lookup less_exclam_hyphen_hyphen.liga {
ignore sub less less' exclam hyphen hyphen;
ignore sub parenleft question less' exclam hyphen hyphen;
ignore sub less' exclam hyphen hyphen hyphen;
sub SPC SPC SPC hyphen' by less_exclam_hyphen_hyphen.liga;
sub SPC SPC hyphen' hyphen by SPC;
sub SPC exclam' hyphen hyphen by SPC;
sub less' exclam hyphen hyphen by SPC;
} less_exclam_hyphen_hyphen.liga;

lookup less_less_hyphen.liga {
ignore sub less less' less hyphen;
ignore sub less' less hyphen hyphen;
sub SPC SPC hyphen' by less_less_hyphen.liga;
sub SPC less' hyphen by SPC;
sub less' less hyphen by SPC;
} less_less_hyphen.liga;

lookup less_hyphen.liga {
ignore sub less less' hyphen;
ignore sub less' hyphen hyphen;
ignore sub less' hyphen @Digit greater;
ignore sub less' hyphen @Digit @Digit greater;
ignore sub less' hyphen @Digit @Digit @Digit greater;
ignore sub less' hyphen less;
ignore sub less' hyphen bar;
ignore sub less' hyphen greater;
sub SPC hyphen' by less_hyphen.liga;
sub less' hyphen by SPC;
} less_hyphen.liga;

lookup less_numbersign_hyphen_hyphen.liga {
ignore sub less less' numbersign hyphen hyphen;
ignore sub less' numbersign hyphen hyphen hyphen;
sub SPC SPC SPC hyphen' by less_numbersign_hyphen_hyphen.liga;
sub SPC SPC hyphen' hyphen by SPC;
sub SPC numbersign' hyphen hyphen by SPC;
sub less' numbersign hyphen hyphen by SPC;
} less_numbersign_hyphen_hyphen.liga;

lookup less_greater.liga {
ignore sub less less' greater;
ignore sub less' greater greater;
sub SPC greater' by less_greater.liga;
sub less' greater by SPC;
} less_greater.liga;

lookup less_colon.liga {
ignore sub less less' colon;
ignore sub less' colon colon;
sub SPC colon' by less_colon.liga;
sub less' colon by SPC;
} less_colon.liga;

lookup less_less.liga {
ignore sub less less' less;
ignore sub hyphen less' less;
ignore sub equal less' less;
ignore sub less' less less;
ignore sub less' less equal;
ignore sub less' less asciitilde;
sub SPC less' by less_less.liga;
sub less' less by SPC;
} less_less.liga;

lookup less_less_less.liga {
ignore sub less less' less less;
ignore sub less' less less less;
sub SPC SPC less' by less_less_less.liga;
sub SPC less' less by SPC;
sub less' less less by SPC;
} less_less_less.liga;

lookup less_less_asciitilde.liga {
ignore sub less less' less asciitilde;
ignore sub less' less asciitilde asciitilde;
sub SPC SPC asciitilde' by less_less_asciitilde.liga;
sub SPC less' asciitilde by SPC;
sub less' less asciitilde by SPC;
} less_less_asciitilde.liga;

lookup less_equal_greater.liga {
ignore sub less less' equal greater;
ignore sub parenleft question less' equal greater;
ignore sub less' equal greater greater;
sub SPC SPC greater' by less_equal_greater.liga;
sub SPC equal' greater by SPC;
sub less' equal greater by SPC;
} less_equal_greater.liga;

lookup less_hyphen_greater.liga {
ignore sub less less' hyphen greater;
ignore sub less' hyphen greater greater;
sub SPC SPC greater' by less_hyphen_greater.liga;
sub SPC hyphen' greater by SPC;
sub less' hyphen greater by SPC;
} less_hyphen_greater.liga;

lookup less_bar_bar_bar.liga {
ignore sub less less' bar bar bar;
ignore sub less' bar bar bar bar;
sub SPC SPC SPC bar' by less_bar_bar_bar.liga;
sub SPC SPC bar' bar by SPC;
sub SPC bar' bar bar by SPC;
sub less' bar bar bar by SPC;
} less_bar_bar_bar.liga;

lookup less_bar_bar.liga {
ignore sub less less' bar bar;
ignore sub less' bar bar bar;
ignore sub less' bar bar greater;
sub SPC SPC bar' by less_bar_bar.liga;
sub SPC bar' bar by SPC;
sub less' bar bar by SPC;
} less_bar_bar.liga;

lookup less_bar.liga {
ignore sub less less' bar;
ignore sub less' bar bar bar;
ignore sub less' bar greater;
sub SPC bar' by less_bar.liga;
sub less' bar by SPC;
} less_bar.liga;

lookup hyphen_bar.liga {
ignore sub hyphen hyphen' bar;
ignore sub less hyphen' bar;
ignore sub hyphen' bar bar;
sub SPC bar' by hyphen_bar.liga;
sub hyphen' bar by SPC;
} hyphen_bar.liga;

lookup hyphen_greater_greater.liga {
ignore sub hyphen hyphen' greater greater;
ignore sub hyphen' greater greater greater;
sub SPC SPC greater' by hyphen_greater_greater.liga;
sub SPC greater' greater by SPC;
sub hyphen' greater greater by SPC;
} hyphen_greater_greater.liga;

lookup hyphen_hyphen_greater.liga {
ignore sub bracketleft hyphen' hyphen greater;
ignore sub hyphen hyphen' hyphen greater;
ignore sub hyphen' hyphen greater greater;
sub SPC SPC greater' by hyphen_hyphen_greater.liga;
sub SPC hyphen' greater by SPC;
sub hyphen' hyphen greater by SPC;
} hyphen_hyphen_greater.liga;

lookup hyphen_greater.liga {
ignore sub bracketleft hyphen' greater;
ignore sub hyphen hyphen' greater;
ignore sub greater hyphen' greater;
ignore sub bar hyphen' greater;
ignore sub hyphen' greater greater;
ignore sub plus hyphen' greater;
sub SPC greater' by hyphen_greater.liga;
sub hyphen' greater by SPC;
} hyphen_greater.liga;

lookup greater_greater.liga {
ignore sub greater greater' greater;
ignore sub greater' greater greater;
ignore sub greater' greater equal;
ignore sub greater' greater hyphen;
ignore sub equal greater' greater;
ignore sub slash greater' greater;
sub SPC greater' by greater_greater.liga;
sub greater' greater by SPC;
} greater_greater.liga;

lookup greater_greater_greater.liga {
ignore sub greater greater' greater greater;
ignore sub greater' greater greater greater;
sub SPC SPC greater' by greater_greater_greater.liga;
sub SPC greater' greater by SPC;
sub greater' greater greater by SPC;
} greater_greater_greater.liga;

lookup greater_equal.liga {
ignore sub greater greater' equal;
ignore sub greater' equal equal;
ignore sub greater' equal greater;
ignore sub greater' equal less;
sub SPC equal' by greater_equal.liga;
sub greater' equal by SPC;
} greater_equal.liga;

lookup greater_colon.liga {
ignore sub greater greater' colon;
ignore sub greater' colon colon;
sub SPC colon' by greater_colon.liga;
sub greater' colon by SPC;
} greater_colon.liga;

lookup greater_bracketright.liga {
ignore sub greater greater' bracketright;
ignore sub plus greater' bracketright;
ignore sub asterisk greater' bracketright;
ignore sub dollar greater' bracketright;
ignore sub slash greater' bracketright;
ignore sub equal greater' bracketright;
ignore sub greater' bracketright bracketright;
sub SPC bracketright' by greater_bracketright.liga;
sub greater' bracketright by SPC;
} greater_bracketright.liga;

lookup less_equal.liga {
ignore sub less' equal bar;
ignore sub less less' equal;
ignore sub parenleft question less' equal;
ignore sub less' equal equal;
ignore sub less' equal less;
sub SPC equal' by less_equal.liga;
sub less' equal by SPC;
} less_equal.liga;

#Less_less
lookup less_less_equal.liga {
ignore sub less' less equal equal;
ignore sub less less' less equal;
sub SPC equal' by less_less_equal.liga;
sub SPC less' equal by SPC;
sub less' less equal by SPC;
} less_less_equal.liga;

lookup less_equal_equal.liga {
ignore sub less less' equal equal;
ignore sub parenleft question less' equal equal;
ignore sub less' equal equal equal;
ignore sub less' equal equal greater;
sub SPC SPC equal' by less_equal_equal.liga;
sub SPC equal' equal by SPC;
sub less' equal equal by SPC;
} less_equal_equal.liga;

lookup less_bar_greater.liga {
ignore sub less less' bar greater;
ignore sub less' bar greater greater;
sub SPC SPC greater' by less_bar_greater.liga;
sub SPC bar' greater by SPC;
sub less' bar greater by SPC;
} less_bar_greater.liga;

lookup underscore_bar_underscore.liga {
ignore sub underscore underscore' bar underscore;
ignore sub underscore' bar underscore underscore;
sub SPC SPC underscore' by underscore_bar_underscore.liga;
sub SPC bar' underscore by SPC;
sub underscore' bar underscore by SPC;
} underscore_bar_underscore.liga;

lookup exclam_equal.liga {
ignore sub exclam exclam' equal;
ignore sub parenleft question exclam' equal;
ignore sub parenleft question less exclam' equal;
ignore sub equal exclam' equal;
ignore sub exclam' equal equal;
sub SPC equal' by exclam_equal.liga;
sub exclam' equal by SPC;
} exclam_equal.liga;

lookup exclam_exclam.liga {
ignore sub exclam exclam' exclam;
ignore sub parenleft question exclam' exclam;
ignore sub parenleft question less exclam' exclam;
ignore sub exclam' exclam exclam;
sub SPC exclam' by exclam_exclam.liga;
sub exclam' exclam by SPC;
} exclam_exclam.liga;

lookup exclam_equal_equal.liga{
ignore sub exclam exclam' equal equal;
ignore sub parenleft question exclam' equal equal;
ignore sub parenleft question less exclam' equal equal;
ignore sub exclam' equal equal equal;
sub SPC SPC equal' by exclam_equal_equal.liga;
sub SPC equal' equal by SPC;
sub exclam' equal equal by SPC;
} exclam_equal_equal.liga;

lookup equal_exclam_equal.liga{
ignore sub equal equal' exclam equal;
ignore sub parenleft question equal' exclam equal;
ignore sub equal' exclam equal equal;
sub SPC SPC equal' by equal_exclam_equal.liga;
sub SPC exclam' equal by SPC;
sub equal' exclam equal by SPC;
} equal_exclam_equal.liga;

lookup equal_greater.liga {
ignore sub bracketleft equal' greater;
ignore sub equal equal' greater;
ignore sub greater equal' greater;
ignore sub bar equal' greater;
ignore sub parenleft question less equal' greater;
ignore sub parenleft question equal' greater;
ignore sub equal' greater equal;
ignore sub equal' greater greater;
sub SPC greater' by equal_greater.liga;
sub equal' greater by SPC;
} equal_greater.liga;

lookup equal_equal.liga {
ignore sub equal equal' equal;
ignore sub parenleft question less equal' equal;
ignore sub parenleft question equal' equal;
ignore sub equal' equal equal;
ignore sub equal' equal greater;
sub SPC equal' by equal_equal.liga;
sub equal' equal by SPC;
} equal_equal.liga;

lookup equal_equal_equal.liga {
ignore sub equal equal' equal equal;
ignore sub parenleft question equal' equal equal;
ignore sub less equal' equal equal;
ignore sub equal' equal equal equal;
ignore sub equal' equal equal greater;
sub SPC SPC equal' by equal_equal_equal.liga;
sub SPC equal' equal by SPC;
sub equal' equal equal by SPC;
} equal_equal_equal.liga;

lookup equal_colon_equal.liga {
ignore sub equal equal' colon equal;
ignore sub parenleft question equal' colon equal;
ignore sub equal' colon equal equal;
sub SPC SPC equal' by equal_colon_equal.liga;
sub SPC colon' equal by SPC;
sub equal' colon equal by SPC;
} equal_colon_equal.liga;

lookup colon_equal.liga {
ignore sub equal colon' equal;
ignore sub colon colon' equal;
ignore sub colon' equal equal;
sub SPC equal' by colon_equal.liga;
sub colon' equal by SPC;
} colon_equal.liga;

lookup colon_greater.liga {
ignore sub colon colon' greater;
ignore sub colon' greater greater;
sub SPC greater' by colon_greater.liga;
sub colon' greater by SPC;
} colon_greater.liga;

lookup colon_less.liga {
ignore sub colon colon' less;
ignore sub colon' less less;
sub SPC less' by colon_less.liga;
sub colon' less by SPC;
} colon_less.liga;

lookup colon_colon.liga {
ignore sub colon colon' colon;
ignore sub colon' colon colon;
ignore sub colon' colon equal;
sub SPC colon' by colon_colon.liga;
sub colon' colon by SPC;
} colon_colon.liga;

lookup semicolon_semicolon.liga {
ignore sub semicolon semicolon' semicolon;
ignore sub semicolon' semicolon semicolon;
sub SPC semicolon' by semicolon_semicolon.liga;
sub semicolon' semicolon by SPC;
} semicolon_semicolon.liga;

lookup semicolon_semicolon_semicolon.liga {
ignore sub semicolon semicolon' semicolon semicolon;
ignore sub semicolon' semicolon semicolon semicolon;
sub SPC SPC semicolon' by semicolon_semicolon_semicolon.liga;
sub SPC semicolon' semicolon by SPC;
sub semicolon' semicolon semicolon by SPC;
} semicolon_semicolon_semicolon.liga;

lookup colon_colon_colon.liga {
ignore sub colon colon' colon colon;
ignore sub colon' colon colon colon;
sub SPC SPC colon' by colon_colon_colon.liga;
sub SPC colon' colon by SPC;
sub colon' colon colon by SPC;
} colon_colon_colon.liga;

lookup colon_question.liga {
ignore sub colon colon' question;
ignore sub colon' question question;
ignore sub colon' question greater;
sub SPC question' by colon_question.liga;
sub colon' question by SPC;
} colon_question.liga;

lookup colon_question_greater.liga {
ignore sub colon colon' question greater;
ignore sub colon' question greater greater;
sub SPC SPC greater' by colon_question_greater.liga;
sub SPC question' greater by SPC;
sub colon' question greater by SPC;
} colon_question_greater.liga;

lookup colon_colon_equal.liga {
ignore sub colon colon' colon equal;
ignore sub colon' colon equal equal;
sub SPC SPC equal' by colon_colon_equal.liga;
sub SPC colon' equal by SPC;
sub colon' colon equal by SPC;
} colon_colon_equal.liga;

lookup bar_bar_bar_greater.liga {
ignore sub bar bar' bar bar greater;
ignore sub bar' bar bar greater greater;
sub SPC SPC SPC greater' by bar_bar_bar_greater.liga;
sub SPC SPC bar' greater by SPC;
sub SPC bar' bar greater by SPC;
sub bar' bar bar greater by SPC;
} bar_bar_bar_greater.liga;

lookup bar_bar_greater.liga {
ignore sub bar bar' bar greater;
ignore sub less bar' bar greater;
ignore sub bar' bar greater greater;
sub SPC SPC greater' by bar_bar_greater.liga;
sub SPC bar' greater by SPC;
sub bar' bar greater by SPC;
} bar_bar_greater.liga;

lookup bar_greater.liga {
ignore sub bar bar' greater;
ignore sub bar' greater greater;
sub SPC greater' by bar_greater.liga;
sub bar' greater by SPC;
} bar_greater.liga;

lookup bar_bar_hyphen.liga {
ignore sub bar bar' bar hyphen hyphen;
ignore sub bar' bar bar hyphen;
sub SPC SPC hyphen' by bar_bar_hyphen.liga;
sub SPC bar' hyphen by SPC;
sub bar' bar hyphen by SPC;
} bar_bar_hyphen.liga;

lookup bar_bar_equal.liga {
ignore sub bar bar' bar equal equal;
ignore sub bar' bar bar equal;
sub SPC SPC equal' by bar_bar_equal.liga;
sub SPC bar' equal by SPC;
sub bar' bar equal by SPC;
} bar_bar_equal.liga;

lookup bar_hyphen.liga {
ignore sub bar bar' hyphen;
ignore sub bar' hyphen hyphen;
ignore sub bar' hyphen greater;
sub SPC hyphen' by bar_hyphen.liga;
sub bar' hyphen by SPC;
} bar_hyphen.liga;

lookup bar_equal.liga {
ignore sub bar bar' equal;
ignore sub bar' equal greater;
ignore sub bar' equal equal;
sub SPC equal' by bar_equal.liga;
sub bar' equal by SPC;
} bar_equal.liga;

lookup bar_bar.liga {
ignore sub bar bar' bar;
ignore sub bar' bar bar;
ignore sub bracketleft bar' bar;
ignore sub bar' bar bracketright;
sub SPC bar' by bar_bar.liga;
sub bar' bar by SPC;
} bar_bar.liga;

lookup hyphen_hyphen.liga {
ignore sub bracketleft hyphen' hyphen greater;
ignore sub parenleft question less exclam hyphen' hyphen;
ignore sub hyphen hyphen' hyphen;
ignore sub less hyphen' hyphen;
ignore sub hyphen' hyphen hyphen;
sub SPC hyphen' by hyphen_hyphen.liga;
sub hyphen' hyphen by SPC;
} hyphen_hyphen.liga;

lookup less_hyphen_hyphen.liga {
ignore sub less less' hyphen hyphen;
ignore sub less' hyphen hyphen hyphen;
sub SPC SPC hyphen' by less_hyphen_hyphen.liga;
sub SPC hyphen' hyphen by SPC;
sub less' hyphen hyphen by SPC;
} less_hyphen_hyphen.liga;

lookup hyphen_hyphen_hyphen.liga {
ignore sub bracketleft hyphen' hyphen hyphen greater;
ignore sub hyphen hyphen' hyphen hyphen;
ignore sub hyphen' hyphen hyphen hyphen;
sub SPC SPC hyphen' by hyphen_hyphen_hyphen.liga;
sub SPC hyphen' hyphen by SPC;
sub hyphen' hyphen hyphen by SPC;
} hyphen_hyphen_hyphen.liga;


lookup question_question.liga {
ignore sub question question' question;
ignore sub question' question question;
sub SPC question' by question_question.liga;
sub question' question by SPC;
} question_question.liga;

lookup question_colon.liga {
ignore sub question question' colon;
ignore sub question' colon colon;
ignore sub question' colon equal;
sub SPC colon' by question_colon.liga;
sub question' colon by SPC;
} question_colon.liga;

lookup question_equal.liga {
ignore sub question question' equal;
ignore sub question' equal equal;
ignore sub parenleft question' equal colon equal;
ignore sub parenleft question' equal exclam equal;
ignore sub parenleft question' equal less less;
ignore sub parenleft question' equal slash equal;
ignore sub parenleft question' equal greater;
sub SPC equal' by question_equal.liga;
sub question' equal by SPC;
} question_equal.liga;

lookup question_period.liga {
ignore sub question question' period;
ignore sub question' period period;
sub SPC period' by question_period.liga;
sub question' period by SPC;
} question_period.liga;

lookup ampersand_ampersand.liga {
ignore sub ampersand ampersand' ampersand;
ignore sub ampersand' ampersand ampersand;
sub SPC ampersand' by ampersand_ampersand.liga;
sub ampersand' ampersand by SPC;
} ampersand_ampersand.liga;

lookup ampersand_equal.liga {
ignore sub ampersand ampersand' equal;
ignore sub ampersand' equal equal;
ignore sub ampersand' equal greater;
sub SPC equal' by ampersand_equal.liga;
sub ampersand' equal by SPC;
} ampersand_equal.liga;

lookup ampersand_ampersand_ampersand.liga {
ignore sub ampersand ampersand' ampersand ampersand;
ignore sub ampersand' ampersand ampersand ampersand;
sub SPC SPC ampersand' by ampersand_ampersand_ampersand.liga;
sub SPC ampersand' ampersand by SPC;
sub ampersand' ampersand ampersand by SPC;
} ampersand_ampersand_ampersand.liga;

lookup period_equal.liga {
ignore sub period period' equal;
ignore sub period' equal equal;
sub SPC equal' by period_equal.liga;
sub period' equal by SPC;
} period_equal.liga;

lookup underscore_underscore.liga {
ignore sub underscore underscore' underscore;
ignore sub underscore' underscore underscore;
sub SPC underscore' by underscore_underscore.liga;
sub underscore' underscore by SPC;
} underscore_underscore.liga;

lookup equal_slash_equal.liga {
ignore sub equal equal' slash equal;
ignore sub parenleft question equal' slash equal;
ignore sub equal' slash equal equal;
sub SPC SPC equal' by equal_slash_equal.liga;
sub SPC slash' equal by SPC;
sub equal' slash equal by SPC;
} equal_slash_equal.liga;

lookup less_hyphen_less.liga {
ignore sub less less' hyphen less;
ignore sub less' hyphen less less;
sub SPC SPC less' by less_hyphen_less.liga;
sub SPC hyphen' less by SPC;
sub less' hyphen less by SPC;
} less_hyphen_less.liga;

lookup less_equal_less.liga {
ignore sub less less' equal less;
ignore sub parenleft question less' equal less;
ignore sub less' equal less less;
sub SPC SPC less' by less_equal_less.liga;
sub SPC equal' less by SPC;
sub less' equal less by SPC;
} less_equal_less.liga;

lookup less_equal_equal_greater.liga {
ignore sub less less' equal equal greater;
ignore sub parenleft question less' equal equal greater;
ignore sub less' equal equal greater greater;
sub SPC SPC greater' by less_equal_equal_greater.liga;
sub SPC SPC equal' greater by SPC;
sub SPC equal' equal greater by SPC;
sub less' equal equal greater by SPC;
} less_equal_equal_greater.liga;

lookup equal_equal_greater.liga {
ignore sub bracketleft equal' equal greater;
ignore sub equal equal' equal greater;
ignore sub parenleft question less equal' equal greater;
ignore sub parenleft question equal' equal greater;
ignore sub equal' equal greater greater;
sub SPC SPC greater' by equal_equal_greater.liga;
sub SPC equal' greater by SPC;
sub equal' equal greater by SPC;
} equal_equal_greater.liga;

lookup equal_greater_greater.liga {
ignore sub equal equal' greater greater;
ignore sub parenleft question equal' greater greater;
ignore sub equal' greater greater greater;
sub SPC SPC greater' by equal_greater_greater.liga;
sub SPC greater' greater by SPC;
sub equal' greater greater by SPC;
} equal_greater_greater.liga;

lookup greater_equal_greater.liga {
ignore sub greater greater' equal greater;
ignore sub greater' equal greater greater;
sub SPC SPC greater' by greater_equal_greater.liga;
sub SPC equal' greater by SPC;
sub greater' equal greater by SPC;
} greater_equal_greater.liga;

lookup greater_greater_equal.liga {
ignore sub greater greater' greater equal;
ignore sub greater' greater equal equal;
sub SPC SPC equal' by greater_greater_equal.liga;
sub SPC greater' equal by SPC;
sub greater' greater equal by SPC;
} greater_greater_equal.liga;

lookup greater_greater_hyphen.liga {
ignore sub greater greater' greater hyphen;
ignore sub greater' greater hyphen hyphen;
sub SPC SPC hyphen' by greater_greater_hyphen.liga;
sub SPC greater' hyphen by SPC;
sub greater' greater hyphen by SPC;
} greater_greater_hyphen.liga;

lookup greater_hyphen.liga {
ignore sub greater greater' hyphen;
ignore sub greater' hyphen hyphen;
ignore sub greater' hyphen greater;
ignore sub greater' hyphen less;
sub SPC hyphen' by greater_hyphen.liga;
sub greater' hyphen by SPC;
} greater_hyphen.liga;

lookup greater_hyphen_greater.liga {
ignore sub greater greater' hyphen greater;
ignore sub greater' hyphen greater greater;
sub SPC SPC greater' by greater_hyphen_greater.liga;
sub SPC hyphen' greater by SPC;
sub greater' hyphen greater by SPC;
} greater_hyphen_greater.liga;

lookup less_asciitilde.liga {
ignore sub less less' asciitilde;
ignore sub less' asciitilde asciitilde;
ignore sub less' asciitilde greater;
sub SPC asciitilde' by less_asciitilde.liga;
sub less' asciitilde by SPC;
} less_asciitilde.liga;

lookup asciitilde_asciitilde.liga {
ignore sub asciitilde asciitilde' asciitilde;
ignore sub less asciitilde' asciitilde;
ignore sub asciitilde' asciitilde asciitilde;
ignore sub asciitilde' asciitilde greater;
sub SPC asciitilde' by asciitilde_asciitilde.liga;
sub asciitilde' asciitilde by SPC;
} asciitilde_asciitilde.liga;

lookup less_asciitilde_greater.liga {
ignore sub less less' asciitilde greater;
ignore sub less' asciitilde greater greater;
sub SPC SPC greater' by less_asciitilde_greater.liga;
sub SPC asciitilde' greater by SPC;
sub less' asciitilde greater by SPC;
} less_asciitilde_greater.liga;

lookup hyphen_less.liga {
ignore sub hyphen hyphen' less;
ignore sub less hyphen' less;
ignore sub greater hyphen' less;
ignore sub hyphen' less less;
sub SPC less' by hyphen_less.liga;
sub hyphen' less by SPC;
} hyphen_less.liga;

lookup hyphen_less_less.liga {
ignore sub hyphen hyphen' less less;
ignore sub hyphen' less less less;
sub SPC SPC less' by hyphen_less_less.liga;
sub SPC less' less by SPC;
sub hyphen' less less by SPC;
} hyphen_less_less.liga;

lookup equal_less_less.liga {
ignore sub equal equal' less less;
ignore sub parenleft question equal' less less;
ignore sub equal' less less less;
sub SPC SPC less' by equal_less_less.liga;
sub SPC less' less by SPC;
sub equal' less less by SPC;
} equal_less_less.liga;

lookup less_hyphen_bar.liga {
ignore sub less less' hyphen bar;
ignore sub less' hyphen bar bar;
sub SPC SPC bar' by less_hyphen_bar.liga;
sub SPC hyphen' bar by SPC;
sub less' hyphen bar by SPC;
} less_hyphen_bar.liga;

lookup less_equal_bar.liga {
ignore sub less less' equal bar;
ignore sub parenleft question less' equal bar;
ignore sub less' equal bar bar;
sub SPC SPC bar' by less_equal_bar.liga;
sub SPC equal' bar by SPC;
sub less' equal bar by SPC;
} less_equal_bar.liga;

lookup bar_equal_greater.liga {
ignore sub bar bar' equal greater;
ignore sub bar' equal greater greater;
sub SPC SPC greater' by bar_equal_greater.liga;
sub SPC equal' greater by SPC;
sub bar' equal greater by SPC;
} bar_equal_greater.liga;

lookup bar_hyphen_greater.liga {
ignore sub bar bar' hyphen greater;
ignore sub bar' hyphen greater greater;
sub SPC SPC greater' by bar_hyphen_greater.liga;
sub SPC hyphen' greater by SPC;
sub bar' hyphen greater by SPC;
} bar_hyphen_greater.liga;

lookup less_asciitilde_asciitilde.liga {
ignore sub less less' asciitilde asciitilde;
ignore sub less' asciitilde asciitilde asciitilde;
ignore sub less' asciitilde asciitilde greater;
sub SPC SPC asciitilde' by less_asciitilde_asciitilde.liga;
sub SPC asciitilde' asciitilde by SPC;
sub less' asciitilde asciitilde by SPC;
} less_asciitilde_asciitilde.liga;

lookup hyphen_asciitilde.liga {
ignore sub hyphen hyphen' asciitilde;
ignore sub hyphen' asciitilde asciitilde;
ignore sub hyphen' asciitilde greater;
sub SPC asciitilde' by hyphen_asciitilde.liga;
sub hyphen' asciitilde by SPC;
} hyphen_asciitilde.liga;

lookup asciitilde_asciitilde_greater.liga {
ignore sub asciitilde asciitilde' asciitilde greater;
ignore sub asciitilde' asciitilde greater greater;
sub SPC SPC greater' by asciitilde_asciitilde_greater.liga;
sub SPC asciitilde' greater by SPC;
sub asciitilde' asciitilde greater by SPC;
} asciitilde_asciitilde_greater.liga;

lookup asciitilde_greater.liga {
ignore sub asciitilde asciitilde' greater;
ignore sub asciitilde' greater greater;
sub SPC greater' by asciitilde_greater.liga;
sub asciitilde' greater by SPC;
} asciitilde_greater.liga;

lookup asciitilde_hyphen.liga {
ignore sub asciitilde asciitilde' hyphen;
ignore sub asciitilde' hyphen hyphen;
sub SPC hyphen' by asciitilde_hyphen.liga;
sub asciitilde' hyphen by SPC;
} asciitilde_hyphen.liga;

lookup asciitilde_at.liga {
ignore sub asciitilde asciitilde' at;
ignore sub asciitilde' at at;
sub SPC at' by asciitilde_at.liga;
sub asciitilde' at by SPC;
} asciitilde_at.liga;

lookup asciicircum_equal.liga {
ignore sub asciicircum asciicircum' equal;
ignore sub asciicircum' equal equal;
sub SPC equal' by asciicircum_equal.liga;
sub asciicircum' equal by SPC;
} asciicircum_equal.liga;

lookup less_dollar_greater.liga {
ignore sub less less' dollar greater;
ignore sub less' dollar greater greater;
sub SPC SPC greater' by less_dollar_greater.liga;
sub SPC dollar' greater by SPC;
sub less' dollar greater by SPC;
} less_dollar_greater.liga;

lookup less_dollar.liga {
ignore sub less less' dollar;
ignore sub less' dollar dollar;
sub SPC dollar' by less_dollar.liga;
sub less' dollar by SPC;
} less_dollar.liga;

lookup dollar_greater.liga {
ignore sub dollar dollar' greater;
ignore sub dollar' greater greater;
sub SPC greater' by dollar_greater.liga;
sub dollar' greater by SPC;
} dollar_greater.liga;

lookup less_plus_greater.liga {
ignore sub less less' plus greater;
ignore sub less' plus greater greater;
sub SPC SPC greater' by less_plus_greater.liga;
sub SPC plus' greater by SPC;
sub less' plus greater by SPC;
} less_plus_greater.liga;

lookup less_plus.liga {
ignore sub less less' plus;
ignore sub less' plus plus;
sub SPC plus' by less_plus.liga;
sub less' plus by SPC;
} less_plus.liga;

lookup plus_greater.liga {
ignore sub plus plus' greater;
ignore sub plus' greater greater;
sub SPC greater' by plus_greater.liga;
sub plus' greater by SPC;
} plus_greater.liga;

lookup less_asterisk_greater.liga {
ignore sub less less' asterisk greater;
ignore sub less' asterisk greater greater;
sub SPC SPC greater' by less_asterisk_greater.liga;
sub SPC asterisk' greater by SPC;
sub less' asterisk greater by SPC;
} less_asterisk_greater.liga;

lookup less_asterisk.liga {
ignore sub less less' asterisk;
ignore sub less' asterisk asterisk;
sub SPC asterisk' by less_asterisk.liga;
sub less' asterisk by SPC;
} less_asterisk.liga;

lookup asterisk_greater.liga {
ignore sub asterisk asterisk' greater;
ignore sub asterisk' greater greater;
sub SPC greater' by asterisk_greater.liga;
sub asterisk' greater by SPC;
} asterisk_greater.liga;

lookup less_slash_greater.liga {
ignore sub less less' slash greater;
ignore sub less' slash greater greater;
sub SPC SPC greater' by less_slash_greater.liga;
sub SPC slash' greater by SPC;
sub less' slash greater by SPC;
} less_slash_greater.liga;

lookup less_slash.liga {
ignore sub less less' slash;
ignore sub less' slash slash;
sub SPC slash' by less_slash.liga;
sub less' slash by SPC;
} less_slash.liga;

lookup slash_greater.liga {
ignore sub slash slash' greater;
ignore sub slash' greater greater;
sub SPC greater' by slash_greater.liga;
sub slash' greater by SPC;
} slash_greater.liga;

lookup numbersign_braceleft.liga {
ignore sub numbersign numbersign' braceleft;
ignore sub numbersign' braceleft braceleft;
sub SPC braceleft' by numbersign_braceleft.liga;
sub numbersign' braceleft by SPC;
} numbersign_braceleft.liga;

lookup numbersign_bracketleft.liga {
ignore sub numbersign numbersign' bracketleft;
ignore sub numbersign' bracketleft bracketleft;
sub SPC bracketleft' by numbersign_bracketleft.liga;
sub numbersign' bracketleft by SPC;
} numbersign_bracketleft.liga;

lookup numbersign_parenleft.liga {
ignore sub numbersign numbersign' parenleft;
ignore sub numbersign' parenleft parenleft;
sub SPC parenleft' by numbersign_parenleft.liga;
sub numbersign' parenleft by SPC;
} numbersign_parenleft.liga;

lookup numbersign_question.liga {
ignore sub numbersign numbersign' question;
ignore sub numbersign' question question;
sub SPC question' by numbersign_question.liga;
sub numbersign' question by SPC;
} numbersign_question.liga;

lookup numbersign_underscore.liga {
ignore sub numbersign numbersign' underscore;
ignore sub numbersign' underscore underscore;
ignore sub numbersign' underscore parenleft;
sub SPC underscore' by numbersign_underscore.liga;
sub numbersign' underscore by SPC;
} numbersign_underscore.liga;

lookup numbersign_exclam.liga {
ignore sub numbersign numbersign' exclam;
ignore sub numbersign' exclam exclam;
sub SPC exclam' by numbersign_exclam.liga;
sub numbersign' exclam by SPC;
} numbersign_exclam.liga;

lookup numbersign_colon.liga {
ignore sub numbersign numbersign' colon;
ignore sub numbersign' colon colon;
sub SPC colon' by numbersign_colon.liga;
sub numbersign' colon by SPC;
} numbersign_colon.liga;

lookup numbersign_equal.liga {
ignore sub numbersign numbersign' equal;
ignore sub numbersign' equal equal;
sub SPC equal' by numbersign_equal.liga;
sub numbersign' equal by SPC;
} numbersign_equal.liga;

lookup numbersign_underscore_parenleft.liga{
ignore sub numbersign numbersign' underscore parenleft ;
ignore sub numbersign' underscore parenleft parenleft;
sub SPC SPC parenleft' by numbersign_underscore_parenleft.liga;
sub SPC underscore' parenleft by SPC;
sub numbersign' underscore parenleft by SPC;
} numbersign_underscore_parenleft.liga;

lookup bracketright_numbersign.liga {
ignore sub bracketright bracketright' numbersign;
ignore sub bracketright' numbersign numbersign;
sub SPC numbersign' by bracketright_numbersign.liga;
sub bracketright' numbersign by SPC;
} bracketright_numbersign.liga;
";
tag = calt;
},
{
automatic = 1;
code = "lookup ccmp_Other_1 {
	@CombiningTopAccents = [acutecomb brevecomb caroncomb circumflexcomb commaturnedabovecomb dblgravecomb dieresiscomb dotaccentcomb gravecomb hookabovecomb hungarumlautcomb macroncomb ringcomb tildecomb];
	@CombiningNonTopAccents = [cedillacomb dotbelowcomb ogonekcomb ringbelowcomb horncomb slashlongcomb slashshortcomb strokelongcomb];
	sub [i j]' @CombiningTopAccents by [idotless jdotless];
	sub [i j]' @CombiningNonTopAccents @CombiningTopAccents by [idotless jdotless];
	@Markscomb = [dieresiscomb dotaccentcomb gravecomb acutecomb hungarumlautcomb circumflexcomb caroncomb brevecomb ringcomb tildecomb macroncomb hookabovecomb dblgravecomb commaturnedabovecomb horncomb dotbelowcomb commaaccentcomb cedillacomb ogonekcomb dieresis dotaccent grave acute hungarumlaut circumflex caron breve ring tilde macron tonos brevecomb_acutecomb brevecomb_gravecomb brevecomb_hookabovecomb brevecomb_tildecomb circumflexcomb_acutecomb circumflexcomb_gravecomb circumflexcomb_hookabovecomb circumflexcomb_tildecomb];
	@MarkscombCase = [dieresiscomb.case dotaccentcomb.case gravecomb.case acutecomb.case hungarumlautcomb.case circumflexcomb.case caroncomb.case brevecomb.case ringcomb.case tildecomb.case macroncomb.case hookabovecomb.case dblgravecomb.case commaturnedabovecomb.case horncomb.case dotbelowcomb.case commaaccentcomb.case cedillacomb.case ogonekcomb.case dieresis.case dotaccent.case grave.case acute.case hungarumlaut.case circumflex.case caron.case breve.case ring.case tilde.case macron.case tonos.case brevecomb_acutecomb.case brevecomb_gravecomb.case brevecomb_hookabovecomb.case brevecomb_tildecomb.case circumflexcomb_acutecomb.case circumflexcomb_gravecomb.case circumflexcomb_hookabovecomb.case circumflexcomb_tildecomb.case];
	sub @Markscomb @Markscomb' by @MarkscombCase;
	sub @Uppercase @Markscomb' by @MarkscombCase;
} ccmp_Other_1;

lookup ccmp_Other_2 {
	sub @Markscomb' @MarkscombCase by @MarkscombCase;
	sub @MarkscombCase @Markscomb' by @MarkscombCase;
} ccmp_Other_2;

lookup ccmp_latn_1 {
	lookupflag 0;
	sub brevecomb acutecomb by brevecomb_acutecomb;
	sub brevecomb.case acutecomb.case by brevecomb_acutecomb.case;
	sub brevecomb gravecomb by brevecomb_gravecomb;
	sub brevecomb.case gravecomb.case by brevecomb_gravecomb.case;
	sub brevecomb hookabovecomb by brevecomb_hookabovecomb;
	sub brevecomb.case hookabovecomb.case by brevecomb_hookabovecomb.case;
	sub brevecomb tildecomb by brevecomb_tildecomb;
	sub brevecomb.case tildecomb.case by brevecomb_tildecomb.case;
	sub circumflexcomb acutecomb by circumflexcomb_acutecomb;
	sub circumflexcomb.case acutecomb.case by circumflexcomb_acutecomb.case;
	sub circumflexcomb gravecomb by circumflexcomb_gravecomb;
	sub circumflexcomb.case gravecomb.case by circumflexcomb_gravecomb.case;
	sub circumflexcomb hookabovecomb by circumflexcomb_hookabovecomb;
	sub circumflexcomb.case hookabovecomb.case by circumflexcomb_hookabovecomb.case;
	sub circumflexcomb tildecomb by circumflexcomb_tildecomb;
	sub circumflexcomb.case tildecomb.case by circumflexcomb_tildecomb.case;
} ccmp_latn_1;

script latn;
lookup ccmp_latn_1;
";
tag = ccmp;
},
{
code = "lookup locl_latn_0 {
	script latn;
	language AZE;
	sub i by idotaccent;
	language CRT;
	sub i by idotaccent;
	language KAZ;
	sub i by idotaccent;
	language TAT;
	sub i by idotaccent;
	language TRK;
	sub i by idotaccent;
} locl_latn_0;

lookup locl_latn_1 {
	script latn;
	language ROM;
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
	sub Tcedilla by Tcommaaccent;
	sub tcedilla by tcommaaccent;
	language MOL;
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
	sub Tcedilla by Tcommaaccent;
	sub tcedilla by tcommaaccent;
} locl_latn_1;

lookup locl_latn_2 {
	script latn;
	language CAT;
	sub l periodcentered' l by periodcentered.loclCAT;
	sub L periodcentered' L by periodcentered.loclCAT.case;
	#sub l.ss01 periodcentered' l.ss01 by periodcentered.loclCAT;
} locl_latn_2;
";
tag = locl;
},
{
automatic = 1;
code = "sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
";
tag = subs;
},
{
automatic = 1;
code = "sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
";
tag = sinf;
},
{
automatic = 1;
code = "sub zero by zerosuperior;
sub one by onesuperior;
sub two by twosuperior;
sub three by threesuperior;
sub four by foursuperior;
sub five by fivesuperior;
sub six by sixsuperior;
sub seven by sevensuperior;
sub eight by eightsuperior;
sub nine by ninesuperior;
sub plus by plussuperior;
";
tag = sups;
},
{
automatic = 1;
code = "sub one slash four by onequarter;
sub one slash two by onehalf;
sub three slash four by threequarters;
";
tag = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
sub N o period by numero;
";
tag = ordn;
},
{
automatic = 1;
code = "sub colon by colon.case;
sub periodcentered.loclCAT by periodcentered.loclCAT.case;
sub dieresiscomb by dieresiscomb.case;
sub dotaccentcomb by dotaccentcomb.case;
sub gravecomb by gravecomb.case;
sub acutecomb by acutecomb.case;
sub hungarumlautcomb by hungarumlautcomb.case;
sub circumflexcomb by circumflexcomb.case;
sub caroncomb by caroncomb.case;
sub brevecomb by brevecomb.case;
sub ringcomb by ringcomb.case;
sub tildecomb by tildecomb.case;
sub macroncomb by macroncomb.case;
sub hookabovecomb by hookabovecomb.case;
sub dblgravecomb by dblgravecomb.case;
sub commaturnedabovecomb by commaturnedabovecomb.case;
sub horncomb by horncomb.case;
sub dotbelowcomb by dotbelowcomb.case;
sub commaaccentcomb by commaaccentcomb.case;
sub cedillacomb by cedillacomb.case;
sub ogonekcomb by ogonekcomb.case;
sub dieresis by dieresis.case;
sub dotaccent by dotaccent.case;
sub grave by grave.case;
sub acute by acute.case;
sub hungarumlaut by hungarumlaut.case;
sub circumflex by circumflex.case;
sub caron by caron.case;
sub breve by breve.case;
sub ring by ring.case;
sub tilde by tilde.case;
sub macron by macron.case;
sub tonos by tonos.case;
sub brevecomb_acutecomb by brevecomb_acutecomb.case;
sub brevecomb_gravecomb by brevecomb_gravecomb.case;
sub brevecomb_hookabovecomb by brevecomb_hookabovecomb.case;
sub brevecomb_tildecomb by brevecomb_tildecomb.case;
sub circumflexcomb_acutecomb by circumflexcomb_acutecomb.case;
sub circumflexcomb_gravecomb by circumflexcomb_gravecomb.case;
sub circumflexcomb_hookabovecomb by circumflexcomb_hookabovecomb.case;
sub circumflexcomb_tildecomb by circumflexcomb_tildecomb.case;
";
tag = case;
},
{
automatic = 1;
code = "sub zero by zero.zero;
";
tag = zero;
}
);
fontMaster = (
{
axesValues = (
100
);
customParameters = (
{
name = winAscent;
value = 1020;
},
{
name = winDescent;
value = 300;
},
{
name = hheaAscender;
value = 1020;
},
{
name = hheaDescender;
value = -300;
},
{
name = typoAscender;
value = 1020;
},
{
name = typoDescender;
value = -300;
},
{
name = hheaLineGap;
value = 0;
},
{
name = typoLineGap;
value = 0;
},
{
name = strikeoutPosition;
value = 320;
},
{
name = "Master Icon Glyph Name";
value = T;
},
{
name = underlinePosition;
value = -155;
},
{
name = underlineThickness;
value = 50;
},
{
name = "Alignment Zones";
value = (
{
pos = 830;
size = 10;
},
{
pos = -110;
size = -10;
},
{
pos = -180;
size = -10;
}
);
}
);
iconName = Light;
id = "EDF5EB54-295C-4C90-9A2F-67CD82979CFF";
metricValues = (
{
over = 10;
pos = 730;
},
{
over = 10;
pos = 730;
},
{
over = 10;
pos = 550;
},
{
over = -10;
},
{
pos = -270;
},
{
pos = 9;
}
);
name = Thin;
stemValues = (
45,
50,
0,
0
);
userData = {
GSCornerRadius = 15;
de.kutilek.MasterGrid.type = units;
de.kutilek.MasterGrid.value = (
10,
10
);
};
},
{
axesValues = (
400
);
customParameters = (
{
name = winAscent;
value = 1020;
},
{
name = winDescent;
value = 300;
},
{
name = hheaAscender;
value = 1020;
},
{
name = hheaDescender;
value = -300;
},
{
name = typoAscender;
value = 1020;
},
{
name = typoDescender;
value = -300;
},
{
name = hheaLineGap;
value = 0;
},
{
name = typoLineGap;
value = 0;
},
{
name = strikeoutPosition;
value = 320;
},
{
name = "Master Icon Glyph Name";
value = R;
},
{
name = underlinePosition;
value = -155;
},
{
name = underlineThickness;
value = 50;
},
{
name = "Alignment Zones";
value = (
{
pos = 830;
size = 10;
},
{
pos = -110;
size = -10;
},
{
pos = -180;
size = -10;
}
);
}
);
id = "CCC0BD40-BA8C-414E-B576-CF0B94E6C996";
metricValues = (
{
over = 10;
pos = 730;
},
{
over = 10;
pos = 730;
},
{
over = 10;
pos = 550;
},
{
over = -10;
},
{
pos = -270;
},
{
pos = 9;
}
);
name = Italic;
stemValues = (
82,
90,
60,
60
);
},
{
axesValues = (
800
);
customParameters = (
{
name = winAscent;
value = 1020;
},
{
name = winDescent;
value = 300;
},
{
name = hheaAscender;
value = 1020;
},
{
name = hheaDescender;
value = -300;
},
{
name = typoAscender;
value = 1020;
},
{
name = typoDescender;
value = -300;
},
{
name = hheaLineGap;
value = 0;
},
{
name = typoLineGap;
value = 0;
},
{
name = strikeoutPosition;
value = 320;
},
{
name = "Master Icon Glyph Name";
value = B;
},
{
name = underlinePosition;
value = -155;
},
{
name = underlineThickness;
value = 50;
},
{
name = "Alignment Zones";
value = (
{
pos = 830;
size = 10;
},
{
pos = -110;
size = -10;
},
{
pos = -180;
size = -10;
}
);
}
);
iconName = Bold;
id = "9ADF6715-3D0F-493D-8567-18A6FBCFC567";
metricValues = (
{
over = 10;
pos = 730;
},
{
over = 10;
pos = 730;
},
{
over = 10;
pos = 550;
},
{
over = -10;
},
{
pos = -270;
},
{
pos = 9;
}
);
name = ExtraBold;
stemValues = (
140,
150,
0,
120
);
userData = {
de.kutilek.MasterGrid.type = units;
de.kutilek.MasterGrid.value = (
10,
10
);
};
}
);
instances = (
{
axesValues = (
100
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--Increase-x-height=0";
}
);
instanceInterpolations = {
"EDF5EB54-295C-4C90-9A2F-67CD82979CFF" = 1;
};
isItalic = 1;
linkStyle = Thin;
name = "Thin Italic";
weightClass = 100;
},
{
axesValues = (
220
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--Increase-x-height=0";
}
);
instanceInterpolations = {
"CCC0BD40-BA8C-414E-B576-CF0B94E6C996" = 0.4;
"EDF5EB54-295C-4C90-9A2F-67CD82979CFF" = 0.6;
};
isItalic = 1;
linkStyle = ExtraLight;
name = "ExtraLight Italic";
weightClass = 200;
},
{
axesValues = (
320
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--Increase-x-height=0";
}
);
instanceInterpolations = {
"CCC0BD40-BA8C-414E-B576-CF0B94E6C996" = 0.73333;
"EDF5EB54-295C-4C90-9A2F-67CD82979CFF" = 0.26667;
};
isItalic = 1;
linkStyle = Light;
name = "Light Italic";
weightClass = 300;
},
{
axesValues = (
400
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--Increase-x-height=0";
}
);
instanceInterpolations = {
"CCC0BD40-BA8C-414E-B576-CF0B94E6C996" = 1;
};
isItalic = 1;
name = Italic;
},
{
axesValues = (
460
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--Increase-x-height=0";
}
);
instanceInterpolations = {
"9ADF6715-3D0F-493D-8567-18A6FBCFC567" = 0.15;
"CCC0BD40-BA8C-414E-B576-CF0B94E6C996" = 0.85;
};
isItalic = 1;
linkStyle = Medium;
name = "Medium Italic";
weightClass = 500;
},
{
axesValues = (
520
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--Increase-x-height=0";
}
);
instanceInterpolations = {
"9ADF6715-3D0F-493D-8567-18A6FBCFC567" = 0.3;
"CCC0BD40-BA8C-414E-B576-CF0B94E6C996" = 0.7;
};
isItalic = 1;
linkStyle = SemiBold;
name = "SemiBold Italic";
weightClass = 600;
},
{
axesValues = (
634
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--increase-x-height=0";
}
);
instanceInterpolations = {
"9ADF6715-3D0F-493D-8567-18A6FBCFC567" = 0.585;
"CCC0BD40-BA8C-414E-B576-CF0B94E6C996" = 0.415;
};
isBold = 1;
isItalic = 1;
name = "Bold Italic";
weightClass = 700;
},
{
axesValues = (
800
);
customParameters = (
{
name = panose;
value = (
2,
0,
0,
9,
0,
0,
0,
0,
0,
0
);
},
{
name = "TTFAutohint options";
value = "--increase-x-height=0";
}
);
instanceInterpolations = {
"9ADF6715-3D0F-493D-8567-18A6FBCFC567" = 1;
};
isItalic = 1;
linkStyle = ExtraBold;
name = "ExtraBold Italic";
weightClass = 800;
},
{
customParameters = (
{
name = "Variable Font Origin";
value = "CCC0BD40-BA8C-414E-B576-CF0B94E6C996";
}
);
name = Regular;
type = variable;
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = dflt;
value = "Copyright 2020 The JetBrains Mono Project Authors (https://github.com/JetBrains/JetBrainsMono)";
}
);
},
{
key = designers;
values = (
{
language = dflt;
value = "Philipp Nurullin, Konstantin Bulenkov";
}
);
},
{
key = designerURL;
value = "https://www.jetbrains.com";
},
{
key = licenses;
values = (
{
language = dflt;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://scripts.sil.org/OFL";
}
);
},
{
key = licenseURL;
value = "https://scripts.sil.org/OFL";
},
{
key = manufacturers;
values = (
{
language = dflt;
value = JetBrains;
}
);
},
{
key = manufacturerURL;
value = "https://www.jetbrains.com";
},
{
key = trademarks;
values = (
{
language = dflt;
value = "JetBrains Mono is a trademark of JetBrains s.r.o.";
}
);
},
{
key = vendorID;
value = JB;
}
);
stems = (
{
horizontal = 1;
name = hStem0;
},
{
name = vStem0;
},
{
horizontal = 1;
name = hStem1;
},
{
name = vStem1;
}
);
unitsPerEm = 1000;
userData = {
GSDimensionPlugin.Dimensions = {
"9ADF6715-3D0F-493D-8567-18A6FBCFC567" = {
HH = 140;
HV = 150;
OH = 130;
OV = 150;
nV = 150;
oH = 130;
oV = 150;
tH = 135;
};
"CCC0BD40-BA8C-414E-B576-CF0B94E6C996" = {
HH = 82;
HV = 92;
OH = 80;
OV = 90;
nV = 90;
oH = 80;
oV = 90;
tH = 82;
};
"EDF5EB54-295C-4C90-9A2F-67CD82979CFF" = {
HH = 45;
HV = 50;
OH = 44;
OV = 50;
nV = 50;
oH = 44;
oV = 50;
tH = 45;
};
};
};
versionMajor = 2;
versionMinor = 240;
}
